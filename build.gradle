plugins {
    id 'java'
}

group 'recordins'
version '1.0-SNAPSHOT'

//sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.resources { srcDirs = ["src/main/java"]; exclude "**/*.java" }


// need higher version than ide default to support java 11

task wrapper(type: Wrapper) {
    gradleVersion = "4.9"
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile fileTree(dir: 'lib', include: '*.jar')
    runtime fileTree(dir: 'lib', include: '*.jar')
}

task packageTests(type: Jar) {
    baseName = 'CheetahWebserverTest'
    manifest {
        attributes(
                "Created-By": 'Philippe Schweitzer',
                "Class-Path": 'lib/' + configurations.compile.collect { it.getName() }.join(' lib/') + ' lib/CheetahWebserver-' + version + '.jar',
                "Main-Class": 'org.cheetah.webserver.CheetahWebserverTest'
        )
    }
    from sourceSets.test.output
}

jar {
    baseName = 'CheetahWebserver'
    manifest {
        attributes(
                "Created-By": 'Philippe Schweitzer',
                "Class-Path": 'lib/' + configurations.compile.collect { it.getName() }.join(' lib/'),
                "Main-Class": 'org.cheetah.webserver.CheetahWebserver'
        )
    }
}

//noinspection GroovyAssignabilityCheck
build {
    dependsOn packageTests
    /*
    def file = new File("$projectDir/lib/CheetahWebserver-" + version + '.jar')

    if(file.exists()){
        delete "$projectDir/lib/CheetahWebserver-" + version + '.jar'
    }
    */

    doLast {
        def jarname = rootProject.name + "-" + version + ".jar"
        delete "$projectDir/" + jarname

        copy{
            from "$buildDir/libs/" + jarname
            into "$projectDir/"
            //include("lib${service}.a")
        }
    }
}

test {
    dependsOn packageTests
    /*
    print "RUN TEST\n"


    copy{
        from "$buildDir/libs/CheetahWebserver-" + version + '.jar'
        into "$projectDir/lib"
    }

    def jarname = "CheetahWebserverTest" + "-" + version + ".jar"

    def file = new File("$projectDir/" + jarname)

    if(file.exists()){
        delete "$projectDir/" + jarname
    }

    copy{
        from "$buildDir/libs/" + jarname
        into "$projectDir/"
    }

    //def file = new File("$projectDir/" + jarname)

    if(file.exists()){


      //  def sout = new StringBuilder(), serr = new StringBuilder()
      //  def command = 'java -jar ' + jarname
      //  def proc = command.execute()
      //  proc.consumeProcessOutput(sout, serr)
      //  proc.waitForOrKill(1000000)


        javaexec {
            main="-jar";
            args = [
                jarname,

        ""
            ]
        }
    }
    else{
        print "jar executable: " + jarname + " does not exist \n"
    }
    */
}